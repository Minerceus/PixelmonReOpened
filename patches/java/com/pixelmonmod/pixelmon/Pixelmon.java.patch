--- a/com/pixelmonmod/pixelmon/Pixelmon.java
+++ b/com/pixelmonmod/pixelmon/Pixelmon.java
@@ -128,25 +128,25 @@
     }
 
     private static void fixLifecycle() {
-        try {
-            Field STABLE = Lifecycle.class.getDeclaredField("STABLE");
-            Field EXPERIMENTAL = Lifecycle.class.getDeclaredField("EXPERIMENTAL");
-            STABLE.setAccessible(true);
-            EXPERIMENTAL.setAccessible(true);
-            ReflectionHelper.flipVariableFinality(EXPERIMENTAL, () -> {
-                try {
-                    EXPERIMENTAL.set(null, STABLE.get(null));
-                    LOGGER.info("Patched lifecycle fields.");
-                } catch (Exception var3) {
-                    LOGGER.error("Failed to set lifecycle fields!");
-                    var3.printStackTrace();
+//        try {
+//            Field STABLE = Lifecycle.class.getDeclaredField("STABLE");
+//            Field EXPERIMENTAL = Lifecycle.class.getDeclaredField("EXPERIMENTAL");
+//            STABLE.setAccessible(true);
+//            EXPERIMENTAL.setAccessible(true);
+//            ReflectionHelper.flipVariableFinality(EXPERIMENTAL, () -> {
+//                try {
+//                    EXPERIMENTAL.set(null, STABLE.get(null));
+//                    LOGGER.info("Patched lifecycle fields.");
+//                } catch (Exception var3) {
+//                    LOGGER.error("Failed to set lifecycle fields!");
+//                    var3.printStackTrace();
+//                }
+//            });
+//        } catch (Exception var2) {
+//            LOGGER.error("Failed to patch lifecycle fields!");
+//            var2.printStackTrace();
+//        }
                 }
-            });
-        } catch (Exception var2) {
-            LOGGER.error("Failed to patch lifecycle fields!");
-            var2.printStackTrace();
-        }
-    }
 
     @SubscribeEvent
     public static void init(FMLCommonSetupEvent event) {
@@ -165,7 +165,7 @@
                                 && !serverVersion.equalsIgnoreCase(NetworkRegistry.ACCEPTVANILLA)
                             ? "9.1.2".equals(serverVersion)
                             : true,
-                    "9.1.2"::equals
+                        (Predicate<String>) "9.1.2"::equals
                 )
             );
         } catch (InvocationTargetException | IllegalAccessException | NoSuchMethodException var5) {
@@ -233,7 +233,7 @@
                                 && !serverVersion.equalsIgnoreCase(NetworkRegistry.ACCEPTVANILLA)
                             ? "9.1.2".equals(serverVersion)
                             : true,
-                    "9.1.2"::equals
+                        (Predicate<String>) "9.1.1"::equals
                 )
             );
         } catch (InvocationTargetException | IllegalAccessException | NoSuchMethodException var1) {
